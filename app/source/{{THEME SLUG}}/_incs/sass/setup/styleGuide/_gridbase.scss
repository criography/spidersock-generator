/* ===================================================================================
 * Module Name: Grid Containers
 * ===================================================================================
 * Initiates responsive grid
 *
 * @dependency susy 2.x           gem   Grid framework
 * @dependency $susy-base         map   Defines grid defaults
 * @dependency $susy-{breakpoint} map   Defines specific grids.
 * =================================================================================== */





/* GRIDBASE CONTAINERS
 * -------------------------------------*/
.gridbase,
.gridbase--narrow,
.gridbase--full{

	/* default grid */
	$total-columns  : map-get( $susy-default, columns );
	$grid-padding   : (100% - map-get( $susy-default, container )) * .5;

	@include container(map-merge( $susy-base, $susy-default ));

	position : relative;
	display  : block;

}







/* 480px+ */
@include breakpoint(emcalc(480)) {
	.gridbase,
	.gridbase--narrow,
	.gridbase--full{
		$total-columns  : map-get( $susy-480, columns );
		$grid-padding   : (100% - map-get( $susy-480, container )) * .5;

		@include container(map-merge($susy-base, $susy-480));
		width: span(100%);
		z-index: 997;
	}
}






/* 640px+ */
@include breakpoint(emcalc(640)) {
	$total-columns  : map-get( $susy-640, columns );
	$grid-padding   : (100% - map-get( $susy-640, container )) * .5;

	.gridbase,
	.gridbase--full{
		@include container(map-merge($susy-base, $susy-640));
	}


	.gridbase--narrow{
		@include container(map-merge($susy-base, $susy-narrow));
	}

}





/* 1024px+ */
@include breakpoint(emcalc(1024)) {
	.gridbase,
	.gridbase--full{
		$total-columns  : map-get($susy-1024, columns );
		$grid-padding   : (100% - map-get($susy-1024, container)) * .5;

		@include container(map-merge($susy-base, $susy-1024));
		width: span(100%);
	}
}




/* 1280px + */
@include breakpoint(emcalc(1280)) {
	.gridbase,
	.gridbase--copy{
		$total-columns  : map-get( $susy-1280, columns );
		$grid-padding   : 0;

		@include container(map-merge($susy-base, $susy-1280));
		width: span($total-columns);
	}



	.gridbase--full{
		$total-columns  : map-get( $susy-full-1280, columns );
		$grid-padding   : 0;

		@include container(map-merge($susy-base, $susy-full-1280));
		width: span($total-columns);
	}


	.gridbase,
	.gridbase--full{
		@if ($isFullWidth == false){
			@include ie8(){
				width         : 960px;
				max-width     : 960px;
				min-width     : 960px;
				padding-left  : 0;
				padding-right : 0;
			}
		}

	}

}



/* 1600px + */
@include breakpoint(emcalc(1600)) {

	.gridbase--full{
		$total-columns  : map-get( $susy-full-1600, columns );
		$grid-padding   : 0;

		@include container(map-merge($susy-base, $susy-full-1600));
		width: span($total-columns);
	}

	.gridbase--full{
		@if ($isFullWidth == false){
			@include ie8(){
				width         : 960px;
				max-width     : 960px;
				min-width     : 960px;
				padding-left  : 0;
				padding-right : 0;
			}
		}
	}


}



/* 1920px + */
@include breakpoint(emcalc(1920)) {

	.gridbase--full{
		$total-columns  : map-get( $susy-full-1920, columns );
		$grid-padding   : 0;

		@include container(map-merge($susy-base, $susy-full-1920));
		width: span($total-columns);
	}


	.gridbase--full{
		@if ($isFullWidth == false){
			@include ie8(){
				width         : 960px;
				max-width     : 960px;
				min-width     : 960px;
				padding-left  : 0;
				padding-right : 0;
			}
		}
	}


}